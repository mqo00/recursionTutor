import("RT_productionrules.nools");

global probName = "evaluate_pseudo";
global funcName = "           evaluate";

// index = row of column lines, start from 0
global inputArgs = ["[1,1,0],[\"-\",\"+\"]", "[1,0],[\"+\"]", "[0],[]"];
global returnVal = [0, 1, 0];
// input end & return start at bcLine, nRows = bcLine + 1
global bcLine = 2;

global prompt = [
`Function evaluate(nums, ops) takes in a list of numbers nums of size n and a list of operations ops (assume it only contains + or -) of size n - 1 and recursively evaluates the expression nums[0] ops[0] nums[1] ... ops[n-1] nums[n] and returns the evaluated number. For example, 
<br> &nbsp&nbsp &nbsp&nbsp evaluate([5, 6, 4], [“+”, “-”]) 
`, // ==
` 7 (5+6-4)
<br> &nbsp&nbsp &nbsp&nbsp evaluate([2], [])
`, // ==
` 2
<br>Trace through this example: evaluate([1,1,0], [“-”,“+”]).
`
];


global hints = {
  hint_enterArgs : "The function takes off the first element in both lists for each recursive case.",
  hint_enterBC : "In this problem, base case is reached when the list 'num' is empty.",
  hint_enterReturn : "Remember to calculate the return value from the previous case.",
};

global lineInput = {
    "bcStart": 1,
    "bcEnd": 2,
    "rcStart": 3,
    "rcEnd": 6};


global code = [
`1 if the list of numbers has only 1 element, 
<br>2 &nbsp&nbsp then return the only number in the list
<br>3 else check the first element in list of operations,
<br>4 &nbsp&nbsp if it’s “+”, 
<br>5 &nbsp&nbsp &nbsp&nbsp then return first element of nums + recursive 
<br> &nbsp &nbsp&nbsp &nbsp&nbsp result on the rest of nums and ops lists
<br>6 &nbsp&nbsp else return first element of nums - recursive
<br> &nbsp &nbsp&nbsp &nbsp&nbsp result on the rest of nums and ops lists
`];


global instruction = [
"Fill out the Call Stack column with the input at each recursive call. Fill 'bc' in the BC? column at the row of the base case function call.",
"Fill out the Return Value column with the returned value of the corresponding function calls on the same row in the order they returned."
];

// ruleName: the name of the rule associated with this skill; optional from CTAT release 4.5 onwards
// category: the category the skill belongs to
// opportunities: the number of opportunities to exercise this skill that exist in this problem
// skillName: the name of the skill (optional: defaults to ruleName)
// label: the display name for the skill (optional: defaults to skillName)
// description: a description of the skill, seen in Tutorshop (optional: defaults to skillName)
/*
global skill_definitions = [
  {
    skillName: "understand concept of base case",
    category: "understand recursive algorithm (base case)",
    opportunities: 3,
    description: "translate codes into recursion algorithm (base case)"
  },
  {
    skillName: "understand concept of recursive case",
    category: "understand recursive algorithm (recursive case)",
    opportunities: 3,
    description: "translate codes into recursion algorithm (recursive case)"
  },
  {
    skillName: "identify input",
    category: "input call stack",
    opportunities: 1,
    description: "identify input of the recursion problem"
  },
  {
    skillName: "identify smaller instance",
    category: "input call stack",
    opportunities: 1,
    description: "identify the smaller instance input of recursion"
  },
  {
    skillName: "identify base case in problem context",
    category: "understand recursive algorithm (base case)",
    opportunities: 1,
    description: "identify the base case in a given problem as the last input"
  },
  {
    skillName: "identify return order of recursive function calls",
    category: "understand recursive algorithm (recursive case)",
    opportunities: 1
  },
  {
    skillName: "identify return value of base case",
    category: "output return value",
    opportunities: 1
  },
  {
    skillName: "identify return value of recursive calls",
    category: "output return value",
    opportunities: 1,
    description: "identify return value in the current recursive function call"
  }
];
*/
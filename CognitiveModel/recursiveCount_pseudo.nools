import("RT_productionrules.nools");

global funcName = "recursiveCount";

// index = row of column lines, start from 0
global inputArgs = [1231231, 123123, 12312, 1231, 123, 12, 1];
global returnVal = [3, 2, 2, 2, 1, 1, 1];
// input end & return start at bcLine, nRows = bcLine + 1
global bcLine = 6;

global prompt =
`<b>Recursive Pseudocode Tracing of <code>recursiveCount</code></b>
<br>Function <code>recursiveCount(n)</code> returns the number of <code>1</code>'s in a given 
positive integer <code>n</code>. Both the input and output type of <code>recursiveCount(n)</code> 
should be an integer. For example,
<code>
<br>recursiveCount(10100) &#61&#61 2 
<br>recursiveCount(23332) &#61&#61 0 
</code>
<br><br>With this pseudocode, trace through <mark><code>recursiveCount(1231231)</code></mark>
`;


global hints = {
  hint_enterArgs : "The function takes off the last digit of the integer for each recursive case.",
  hint_enterBC : "In this problem, base case is reached when the function input only has one digit.",
  hint_enterReturn : "Remember to add the return value from the previous case.",
};

global lineInput = {
    "bcStart": 1,
    "bcEnd": 4,
    "rcStart": 5,
    "rcEnd": 8};

global code = 
`1 if the current integer is 1,
<br>2 &nbsp&nbsp then return 1
<br>3 if current integer is not 1 but still less than 10, 
<br>4 &nbsp&nbsp then return 0
<br>5 else check the last digit of the current integer
<br>6 &nbsp&nbsp if itâ€™s 1, then return 1 + the recursive result
<br>7 &nbsp&nbsp &nbsp&nbsp on the rest of the digits
<br>8 &nbsp&nbsp else return recursive result on the rest of digits
`;


global instruction = [
"Fill out the Call Stack column with the input at each recursive call. Fill 'bc' in the BC? column at the row of the base case function call.",
"Fill out the Return Value column with the returned value of the corresponding function calls on the same row in the order they returned."
];

// ruleName: the name of the rule associated with this skill; optional from CTAT release 4.5 onwards
// category: the category the skill belongs to
// opportunities: the number of opportunities to exercise this skill that exist in this problem
// skillName: the name of the skill (optional: defaults to ruleName)
// label: the display name for the skill (optional: defaults to skillName)
// description: a description of the skill, seen in Tutorshop (optional: defaults to skillName)
/*
global skill_definitions = [
  {
    skillName: "understand concept of base case",
    category: "understand recursive algorithm (base case)",
    opportunities: 3,
    description: "translate codes into recursion algorithm (base case)"
  },
  {
    skillName: "understand concept of recursive case",
    category: "understand recursive algorithm (recursive case)",
    opportunities: 3,
    description: "translate codes into recursion algorithm (recursive case)"
  },
  {
    skillName: "identify input",
    category: "input call stack",
    opportunities: 5,
    description: "identify input of the recursion problem"
  },
  {
    skillName: "identify smaller instance",
    category: "input call stack",
    opportunities: 5,
    description: "identify the smaller instance input of recursion"
  },
  {
    skillName: "identify base case in problem context",
    category: "understand recursive algorithm (base case)",
    opportunities: 1,
    description: "identify the base case in a given problem as the last input"
  },
  {
    skillName: "identify return order of recursive function calls",
    category: "understand recursive algorithm (recursive case)",
    opportunities: 1
  },
  {
    skillName: "identify return value of base case",
    category: "output return value",
    opportunities: 1
  },
  {
    skillName: "identify return value of recursive calls",
    category: "output return value",
    opportunities: 5,
    description: "identify return value in the current recursive function call"
  }
];
*/
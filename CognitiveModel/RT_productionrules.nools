// productionrules for recursionTutor

import("RT_types.nools");

// Helper functions

// comparator for input string BC or bc
function cmpLowerBC(s, t) {
    return s.selection == t.selection && s.input.toLowerCase() == "bc";
}

// when student's current row in the bcCol hasn't reached bc row
function notReachBC(s, t) {
    var ss = s.selection;
    // console.log(parseInt(ss.substr(ss.length-3,1)));
    return parseInt(ss.substr(ss.length-3,1)) < bcLine;
}

// when student's current row in the bcCol has gone beyond bc row
function beyondBC(s, t) {
    var ss = s.selection;
    // console.log(parseInt(ss.substr(ss.length-3,1)));
    return parseInt(ss.substr(ss.length-3,1)) > bcLine;
}

rule bootstrap {
	when {
		s: Boolean s === false from false;
	}
	then {
		let cols = ["lineNumbers", "callStackCol", "baseCaseCol", "returnValCol"];
        var cellName, cellVal, cellCol; 
        for (let col = 0; col < cols.length; col++) {
            let cellNameList=[];
            cellVal = null;
            cellCol = cols[col];
            if (col == 0) {
                for (let lineName in lineInput) {
                    cellNameList.push(lineName);
                    assert(new Cell(lineName, cellVal, -1, cellCol));
                }
            } else {
                for (let row = 0; row < bcLine + 1; row++) {
                    // cellName e.g., callStackCol.R0C0, baseCaseCol.R2C2
                    cellVal=null;
                    cellName = cols[col] + ".R" + row + "C0"; 
                    if (row == 0 && col == 1) { // first input val
                        cellVal = inputArgs[row];
                    }
                    cellNameList.push(cellName);
                    assert(new Cell(cellName, cellVal, row, cellCol));
                    if (cellVal != null) {
                        assert(new TPA(cellName, "UpdateTextField", cellVal));
                    }
                }
            }
            let visible = col < 3 ? true : false;
            assert(new Column(cellCol, cellNameList, visible));
            assert(new TPA(cellCol, "setVisible", visible));
        }
        assert(new Problem(funcName+inputArgs[0], false));
        assert(new TPA("probDscp", "UpdateTextArea", prompt1+"="+prompt2+"="+prompt3));
        assert(new TPA("probCode", "UpdateTextArea", code1+"=="+code2+"=="+code3+"/\/"+code4+"/\/"+code5));
        assert(new TPA("step2Tag", "setVisible", false));
        assert(new TPA("returnValColTag", "setVisible", false));

        assert(new TPA("funcNameCol", "setVisible", false));
        assert(new TPA("callStackTag", "setVisible", false));
        assert(new TPA("callStackCol", "setVisible", false));
        assert(new TPA("baseCaseColTag", "setVisible", false));
        assert(new TPA("baseCaseCol", "setVisible", false));

		setProblemAttribute("use_backtracking", true);
		halt();
	}
}

// Production rules
// subgoal              correct rules           hint/buggy rules
// inputLineNum         enterLineNum            buggyLineNum, lineToCallHint 
// inputCallStack       enterArgs; enterBC      buggyBC
// inputReturnVal       enterReturn             buggyReturn

// TODO: SRL reflection hint msg at BC step & return 1st step?
// TODO: fix bug message at BC step


// enterLineNum
// If subGoal == "inputLineNum", there're >=1 out of 4 linNumInput box empty
//  And student enter correct lineNum for an empty input box
// Then update the value at input box interface & WM
//  And If lineNumbers Column has no cell with empty value
//      update subgoal to "inputCallStack"
//      init curStep to be ["callStackCol", 1] 
//          with scaffolding: row start from 1, not 0 (filled by tutor)
//      show step label, instruction for step2
rule enterLineNum {
    when {
        p: Problem p.subGoal === "inputLineNum";
        c: Cell c.colName == "lineNumbers" && !c.value {name: sel};
        c2: Cell c2.colName == "lineNumbers" && c2.name != sel;
        c3: Cell c3.colName == "lineNumbers" && c3.name != sel && c3.name != c2.name;
        c4: Cell c4.colName == "lineNumbers" && c4.name != sel && c4.name != c3.name && c4.name != c2.name;
    }
    then {
        if (checkSAI({selection: sel, action: "UpdateTextField", input: lineInput[sel]})) {
            modify(c, "value", lineInput[sel]);
            // switch from inputLineNum to inputCallStack
            if (c.value && c2.value && c3.value && c4.value) {
                modify(p, "subGoal", "inputCallStack");
                modify(p, "curStep", ["callStackCol", 1]);
                // show step 2 title & instruction
                assert(new TPA("step2Tag", "setVisible", true));
                assert(new TPA("step2Dscp", "UpdateTextArea", instruction[0]));

                assert(new TPA("funcNameCol", "setVisible", true));
                assert(new TPA("funcNameCol.R0C0", "UpdateTextArea", funcName+"(                     )")); 
                assert(new TPA("funcNameCol.R1C0", "UpdateTextArea", funcName+"(                     )"));

                assert(new TPA("callStackTag", "setVisible", true));
                assert(new TPA("callStackCol", "setVisible", true));

                assert(new TPA("baseCaseColTag", "setVisible", true));
                assert(new TPA("baseCaseCol", "setVisible", true));
            }
            halt();
        } else {
            backtrack();
        }
    }
}

// lineToCallHint
// If subGoal == "inputCallStack" and student haven't been filled first step
// Then display hint for call stack
rule lineToCallHint {
    when {        
        p: Problem p.subGoal === "inputCallStack";
        c: Cell c.colName == "callStackCol" && c.rowNum == 1 && !c.value;
    }
    then {
        assert(new Hint("Good job! Start work on the call stack column now!"));
    }
}


// enterArgs
// If subGoal == "inputCallStack", row = curStep[1] <= bcLine
//  And all cells at callStackCol w/ rowNum < row has value (inherently met)
//  And student enter correct arg that match inputArgs[row] at callStackCol
// Then update the value at table callStackCol & row, curStep row++
rule enterArgs {
    when {
        p: Problem p.subGoal === "inputCallStack" && p.curStep[1] <= bcLine 
            {curStep: step};
        c: Cell c.colName == "callStackCol" && c.rowNum == step[1] && !c.value 
            {name: sel};
    }
    then {
        let row = step[1];
        let nrow = row+1;
        console.log("current row: "+row);
         // inputArgs[row] should be UpdateTextArea (not TextField)
        if (checkSAI({selection: sel, action: "UpdateTextArea", input: inputArgs[row] })) {
            modify(c, "value", inputArgs[row]);
            modify(p, "curStep", ["callStackCol", nrow]);
            assert(new TPA("funcNameCol.R"+nrow+"C0", "UpdateTextArea", funcName+"(                     )"));

            halt();
        } else {
            backtrack();
        }
        assert(new Hint("Read the recursive case in the codes left. How does the function make the problem smaller?"));
        assert(new Hint("The function takes off the last digit of the integer for each recursive case."));
        assert(new Hint("Fill '"+inputArgs[row]+"'' in the highlighted field."));

    }
}

// enterBC
// If subGoal == "inputCallStack", curStep[1] == bcLine+1
//  And all cells at callStackCol w/ rowNum <= bcLine has value (inherently met)
//  And student enter "bc/BC" at bcLine & baseCaseCol
// Then update the value at table baseCaseCol & bcLine to "BC"
//  update subgoal to "inputReturnVal", curStep to ["returnValCol", bcLine]
//  update instruction, set returnValCol visible to true 
rule enterBC {
    when { // curStep is actually the next row of bcLine
        p: Problem p.subGoal === "inputCallStack" && p.curStep[1] == bcLine+1 ;
        bc: Cell bc.colName == "baseCaseCol" && bc.rowNum == bcLine {name: sel};
        col: Column col.name == "returnValCol";
    }
    then {
        assert(new Hint("Read the code on the left. When is the base case reached?"));
        assert(new Hint("In this problem, base case is reached when the function input only has one digit."));
        assert(new Hint("Fill 'bc' in the highlighted field."));

        var ans = "bc"; // pass in comparator, or check StudentValues
        var SAI = {selection: sel, action: "UpdateTextArea", input: ans};

        if (checkSAI(SAI,  cmpLowerBC)) {
            modify(bc, "value", ans);
            modify(p, "subGoal", "inputReturnVal");
            modify(p, "curStep", ["returnValCol", bcLine]);

            // update instruction & set retrunValCol to visible 
            modify(col, "visible", true);
            assert(new TPA("step2Dscp", "UpdateTextArea", instruction[1]));
            assert(new TPA("returnValCol", "setVisible", col.visible)); 
            assert(new TPA("returnValColTag", "setVisible", true));
            halt();
            assert(new Hint("Good job! Start work on the return value column now!"));
        } else {
            backtrack();
        }
    }
}

// enterReturn
// If subGoal == "inputReturnVal", row = curStep[1] <= bcLine
//  And student enter correct return that match returnVal[row] at returnValCol
// Then update the value at table returnValCol & row, curStep row--
//  And if row == 0, update done to true
rule enterReturn {
    when {
        p: Problem p.subGoal === "inputReturnVal" && p.curStep[1] <= bcLine
            {curStep: step}; 
        c: Cell c.colName == "returnValCol" && c.rowNum == step[1] && !c.value 
            {name: sel};
    }
    then {
        let row = step[1];
        // console.log(row);
        if (checkSAI({selection: sel, action: "UpdateTextArea", input: returnVal[row]})) {
            modify(c, "value", returnVal[row]);
            modify(p, "curStep", ["returnValCol", row-1]);
            if (row == 0) {
                modify(p, "done", true);
            }
            halt();
        } else {
            backtrack();
        }
        assert(new Hint("Read the code on the left. What would the function return for this case?"));
        assert(new Hint("Remember to add the return value from the previous case."));        
        assert(new Hint("Fill '"+returnVal[row]+"' in the highlighted field."));

    }
}

// buggyLineNum
// If subgoal is inputLineNum, student input the wrong line number
// Then display bug messages
rule buggyLineNum {
    when {
        p: Problem p.subGoal === "inputLineNum";
        c: Cell c.colName == "lineNumbers" && !c.value {name: sel};
    }
    then {
        var ans = lineInput[sel];
        var SAI = {selection: sel, action: "UpdateTextArea", input: ans};
        if (checkSAI(SAI, function(s, t) {return s.selection == "bcStart" && s.selection == t.selection && s.input != ans;}, true)) {
            setSuccessOrBugMsg("What portion of the code is base case?");
            assert(new Hint("Base case is the simple case which can be resolved directly."));
            assert(new Hint("The base case starts at line "+lineInput.bcStart+"."));
        } else if (checkSAI(SAI, function(s, t) {return s.selection == "bcEnd" && s.selection == t.selection && s.input != ans;}, true)){
            setSuccessOrBugMsg("What portion of the code is base case?");
            assert(new Hint("Base case is the simple case which can be resolved directly."));
            assert(new Hint("The base case ends at line "+lineInput.bcEnd+"."));
        } else if (checkSAI(SAI, function(s, t) {return s.selection == "rcStart" && s.selection == t.selection && s.input != ans;}, true)){
            setSuccessOrBugMsg("What portion of the code is recursive case?");
            assert(new Hint("The recursive case requires solving 'simpler' version of the original problem."));
            assert(new Hint("The recursive case starts at line "+lineInput.rcStart+"."));

        } else if (checkSAI(SAI, function(s, t) {return s.selection == "rcEnd" && s.selection == t.selection && s.input != ans;}, true)){
            setSuccessOrBugMsg("What portion of the code is recursive case?");
            assert(new Hint("The recursive case requires solving 'simpler' version of the original problem."));
            assert(new Hint("The recursive case ends at line "+lineInput.rcEnd+"."));
        }
        backtrack();
    }
}


// buggyBC scenarios
// (1) callStackCol haven't reach bcLine+1, attempt to check baseCaseCol
// (2) callStackCol go beyond bcLine+1, attempt to fill in more args
//     TODO: currently #rows = len(inputArgs), need global var for table #row
// (3) callStackCol at bcLine+1, check baseCaseCol at row != bcLine
// TODO: bug message appears at wrong time
rule buggyBC {
    when {
        p: Problem p.subGoal === "inputCallStack";
        bc: Cell bc.colName == "baseCaseCol" && bc.rowNum == bcLine {name: sel};
        sai: StudentValues sai.input != null {selection: sSel, input: sInput};
        sc: Cell sc.colName == "baseCaseCol" && sc.name == sSel &&
            sc.rowNum != bcLine && sc.name != sel ; 
    }
    then {
        var ans = "bc";
        var SAI = {selection: sSel, action: "UpdateTextArea", input: "don't_care"};
        if (checkSAI(SAI, notReachBC, true)) {
            // console.log("111111");
            setSuccessOrBugMsg(" 'Call Stack' column hasn't reach the base case. Try to fill in more arguments!");
        } else if (checkSAI(SAI, beyondBC, true)) {
            // console.log("222222");
            setSuccessOrBugMsg(" 'Call Stack' column has gone beyond the base case. Try to check 'BC' column!");
        } else if (checkSAI({selection: sSel, action: "UpdateTextArea", input: "bc"},  cmpLowerBC, true)){
            setSuccessOrBugMsg("Good job! This is the correct base case.");
        }
        backtrack(); // this level or where to backtrack?
    }
}

// buggyReturn scenarios
// (1) start from row 0 of returnValCol instead of row bcLine
// (2) start from row bcLine but wrong base case return value 
// (3) wrong value at curStep row -> off by 1 (too hard to detect)
// TODO: same problem as buggyBC, can't display bug messages at right time
rule buggyReturn {
    when {
        p: Problem p.subGoal === "inputReturnVal" {curStep: step}; 
        sai: StudentValues sai.input != null {selection: sSel, input: sInput};
        c: Cell c.colName == "returnValCol" && c.rowNum == step[1] && !c.value 
            {name: sel};
        sc: Cell sc.colName == "returnValCol" && sc.name == sSel && 
            (sc.name != sel || (sc.name == sel && sInput != returnVal[step[1]]))
            {rowNum: scR}; 
    }
    then {
        let row = step[1]; 
        var SAI = {selection: sSel, action: "UpdateTextArea", input: sInput}; // or "don't_care"
        if (checkSAI(SAI, function(s, t) {return row == bcLine && scR == 0;}, true)) {
            // console.log("333333");
            setSuccessOrBugMsg("What is the order of return for recursive callls?");
            // TODO: hint after setSuccessOrBugMsg doesn't seem to work 
            assert(new Hint("Start to return from the inner-most recursive call, not the outer-most call!"));
            assert(new Hint("First return from the base case row, what should the return value be?"));
            assert(new Hint("Fill '"+returnVal[row]+"' in the highlighted field."));

        } else if (checkSAI(SAI, function(s, t) {return row == bcLine && scR == row;}, true)) {
            // console.log("444444");
            setSuccessOrBugMsg("Good job for correctly returning from the inner-most recursive call, which is the base case. What should the return value be at base case?");
            assert(new Hint("Fill '"+returnVal[row]+"' in the highlighted field."));
        }
        backtrack(); // this level or where to backtrack?
    }
}


rule Done {
	when {
		prob : Problem prob.done === true;
	}
	then {
		if (checkSAI({selection: "done", action: "ButtonPressed", input: "don't_care"})) {
			halt();
		}
	}
}
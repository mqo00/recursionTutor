import("RT_productionrules.nools");


global problemName = "recursiveCount_1231231";
// index = row of column lines, start from 0
global inputArgs = [1231231, 123123, 12312, 1231, 123, 12, 1];
global returnVal = [3, 2, 2, 2, 1, 1, 1];
// input end & return start at bcLine, nRows = bcLine + 1
global bcLine = 6;

global prompt1 = "Recursive Code Tracing of recursiveCount<br>Function recursiveCount(n) returns the number of 1's in a given positive integer n. Both the input and output type of recursiveCount(n) should be an integer. For example, <br>&nbsp&nbsp &nbsp&nbsp recursiveCount(10100) ";
global prompt2 = " 2 <br>&nbsp&nbsp &nbsp&nbsp recursiveCount(23332) ";
global prompt3 = " 0 <br>Trace through this example: recursiveCount(1231231).";


global lineInput = {
    "bcStart": 2,
    "bcEnd": 5,
    "rcStart": 6,
    "rcEnd": 10};
//"Recursive Code Tracing of recursiveCount Function recursiveCount(n) returns the number of 1's in a given positive integer n. Both the input and output type of recursiveCount(n) should be an integer. For example, <br>recursiveCount(10100) - 2";  
//  recursiveCount(23332) = 0  Trace through this example: recursiveCount(1231231).";
//"Recursive Code Tracing of recursiveCount<br>Function recursiveCount(n) returns the number of 1's in a given positive integer n. Both the input and output type of recursiveCount(n) should be an integer. For example, <br>recursiveCount(10100) = 2 <br>recursiveCount(23332) = 0 <br>Trace through this example: recursiveCount(1231231).";


global lineNumInput = [2, 5, 6, 10];
global code1 = `
1 def recursiveCount(n):
<br>2 &nbsp&nbsp if n 
`;

global code2 = `
  1:
<br>3 &nbsp&nbsp &nbsp&nbsp return 1
<br>4 &nbsp&nbsp elif n < 10:
<br>5 &nbsp&nbsp &nbsp&nbsp return 0
<br>6 &nbsp&nbsp else:
<br>7 &nbsp&nbsp &nbsp&nbsp if n%10 
`;

global code3= ` 
1:
<br>8 &nbsp&nbsp &nbsp&nbsp &nbsp&nbsp return 1 + recursiveCount(n
`;

global code4 = `
 10)
<br>9 &nbsp&nbsp &nbsp&nbsp else:
<br>10 &nbsp&nbsp &nbsp&nbsp &nbsp return recursiveCount(n 
`;

global code5=`10)`;

//global code = "<br>1 def recursiveCount(n):<br>2    if n -- 1:<br>3        return 1<br>4    elif n < 10:<br>5        return 0<br>6    else:<br>7        if n%10 -- 1:<br>8            return 1 + recursiveCount(n divide 10)<br>9        else:<br>10            return recursiveCount(n divide 10)";


global instruction = [
"Fill out the Call Stack column with the input at each recursive call. Fill 'bc' in the BC? column at the row of the base case function call.",
"Fill out the Return Value column with the returned value of the corresponding function calls on the same row in the order they returned."
];
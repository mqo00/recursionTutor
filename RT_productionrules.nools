import("RT_types.nools");

rule bootstrap {
	when {
		s: Boolean s === false from false;
	}
	then {
        let lineNumName = ["bcStart", "bcEnd", "rcStart", "rcEnd"];
		let cols = ["lineNumbers", "callStackCol", "baseCaseCol", "returnValCol"];
        var cellName, cellVal, cellCol; 
        for (let col = 0; col < cols.length; col++) {
            let cellNameList=[];
            cellVal = null;
            cellCol = cols[col];
            if (col == 0) {
                for (let row = 0; row < lineNumName.length; row++) {
                    cellName = lineNumName[row];
                    cellNameList.push(cellName);
                    assert(new Cell(cellName, cellVal, -1, cellCol));
                }
            } else {
                for (let row = 0; row < bcLine + 1; row++) {
                    // cellName e.g., callStackColRow0, baseCaseColRow2
                    cellName = cols[col] + "Row" + row; 
                    if (row == 0 && col == 1) { // first input val
                        cellVal = inputArgs[row];
                    }
                    cellNameList.push(cellName);
                    assert(new Cell(cellName, cellVal, row, cellCol));
                    if (cellVal != null) {
                        // [selection, action, input], sel = cellName or cell?
                        assert(new TPA(cellName, "UpdateTextField", cellVal));
                    }
                }
            }
            let visible = col < 2 ? true : false;
            assert(new Column(cellCol, cellNameList, visible));
		    console.log("bootstrap", cellCol, cellNameList);
        }

        assert(new Problem(problemName, lineNumName, lineNumInput, inputArgs, returnVal, bcLine, false));
        assert(new TPA("probDscp", "UpdateTextArea", prompt));
        assert(new TPA("probCode", "UpdateTextArea", code));
        assert(new TPA("step2Dscp", "UpdateTextArea", instruction[0]));




		setProblemAttribute("use_backtracking", true);
		halt();
	}
}


rule Done {
	when {
		prob : Problem prob.done === true;
	}
	then {
		if (checkSAI({selection: "done", action: "ButtonPressed", input: "don't_care"})) {
			halt();
		}
	}
}
